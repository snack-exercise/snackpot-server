# github repository Actions 페이지에 나타낼 이름
name: dev deploy

# event trigger
on:
  push:
    branches:
      - develop

jobs:
  develop-cd:
    runs-on: ubuntu-22.04 # 필수, 실행환경 지정
    steps:

      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## (3-1) application-dev.yml 생성
      - name: make application-dev.yml
        run: |
          cd ./snackpot-api/src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_DEV_YML }}" > ./application-dev.yml
        shell: bash

      ## (3-2) application-jwt.yml 생성
      - name: make application-jwt.yml
        run: |
          cd ./snackpot-api/src/main/resources
          touch ./application-jwt.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" > ./application-jwt.yml
        shell: bash

      ## (3-2) .env 생성
      - name: make .env
        run: |
          cd ./snackpot-api
          touch ./.env
          echo "${{ secrets.DEV_DOCKER_ENV }}" > ./.env
        shell: bash

      # (4) ./gradlew 권한 설정
      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      # (5) Gradle build snackpot-api모듈만 build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew :snackpot-api:clean build -x test

      # (6) docker build & push to production
      - name: Docker build & push to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKER_MJ_USERNAME }} -p ${{ secrets.DOCKER_MJ_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_MJ_REPO }}:latest-dev ./snackpot-api
          docker push ${{ secrets.DOCKER_MJ_REPO }}:latest-dev

      # (7) aws 세팅
      - name: aws 세팅
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # (8) 로컬 docker-compose.yml 파일 EC2로 복사
      - name: Copy docker-compose.yml to EC2 via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_EC2_USERNAME }}
          key: ${{ secrets.DEV_KEY }}
          port: 22
          source : "./snackpot-api/docker-compose-dev.yml"
          target : "./snackApp"
          debug: true

      # (8) 로컬 .env파일 파일 EC2로 복사
      - name: Copy .env to EC2 via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_EC2_USERNAME }}
          key: ${{ secrets.DEV_KEY }}
          port: 22
          source : "./snackpot-api/.env"
          target : "./snackApp"
          debug: true

      # (8) 로컬 mariadb 파일 파일 EC2로 복사
      - name: Copy mariadb to EC2 via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_EC2_USERNAME }}
          key: ${{ secrets.DEV_KEY }}
          port: 22
          source : "./snackpot-api/mariadb"
          target : "./snackApp"
          debug: true


      # (9) 서버에 접속하여 도커 이미지를 pull 받고 실행하기
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_EC2_USERNAME }}
          key: ${{ secrets.DEV_KEY }}
          port: 22
          script: |
            cd snackApp/snackpot-api
            sudo docker-compose -f docker-compose-dev.yml down
            sudo docker-compose -f docker-compose-dev.yml pull
            sudo docker image rm ${{ secrets.DOCKER_MJ_REPO }}
            sudo docker-compose -f docker-compose-dev.yml up -d
