# github repository Actions 페이지에 나타낼 이름
name: prod deploy

# event trigger
on:
  push:
    branches:
      - main

jobs:
  production-cd:
    runs-on: ubuntu-22.04 # 필수, 실행환경 지정
    steps:

      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## (3-1) application-prod.properties 생성
      - name: make api application-prod.yml
        run: |
          cd ./snackpot-api/src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.API_APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      - name: make batch application-prod.yml
        run: |
          cd ./snackpot-batch/src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.BATCH_APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      ## (3-2) application-jwt.yml 생성
      - name: make api application-jwt.yml
        run: |
          cd ./snackpot-api/src/main/resources
          touch ./application-jwt.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" > ./application-jwt.yml
        shell: bash

      ## (3-4) application-fcm.yml 생성
      - name: make api application-fcm.yml
        run: |
          cd ./snackpot-api/src/main/resources
          touch ./application-fcm.yml
          echo "${{ secrets.APPLICATION_FCM_YML }}" > ./application-fcm.yml
        shell: bash

      ## (3-5) application-sentry.yml 생성
      - name: make application-sentry.yml
        run: |
          cd ./src/main/resources
          touch ./application-sentry.yml
          echo "${{ secrets.APPLICATION_SENTRY_YML }}" > ./application-sentry.yml
        shell: bash

      ## (3-6) snackpot-fcm.json 생성
      - name: make snackpot-fcm.json
        run: echo "${{ secrets.FCM_JSON_SECRET }}" | base64 --decode > ./snackpot-api/src/main/resources/snackpot-fcm.json
        shell: bash

      ## (3-2) .env 생성
      - name: make .env
        run: |
          touch ./.env
          echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" > ./.env
        shell: bash

      # (4) ./gradlew 권한 설정
      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      # (5) Gradle build snackpot-batch모듈 build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew :snackpot-batch:clean build -x test

      # (5) Gradle build snackpot-api모듈 build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew :snackpot-api:clean build -x test

      # (6-1) docker build & push to production (API)
      - name: Docker build & push to DockerHub (API)
        run: |
          cd ./snackpot-api
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}:latest-api-prod .
          docker push ${{ secrets.DOCKER_REPO }}:latest-api-prod

      # (6-2) docker build & push to production (BATCH)
      - name: Docker build & push to DockerHub (BATCH)
        run: |
          cd ./snackpot-batch
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}:latest-batch-prod .
          docker push ${{ secrets.DOCKER_REPO }}:latest-batch-prod

      # (7) aws 세팅
      - name: aws 세팅
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # app-deploy라는 폴더 생성 및 appspec.yml 파일과 scripts 폴더 이동하기
      - name: Create app-deploy folder에 move appspec.yml and scripts folder and zip app-deploy folder
        run: |
          mkdir app-deploy
          cp appspec.yml app-deploy/
          cp scripts/*.sh app-deploy/
          cp docker-compose-prod.yml app-deploy/
          zip -r app-deploy.zip app-deploy

      - name: Check files and folders
        run: |
          ls -al
          ls -al scripts/
          cat appspec.yml
      

      # (8) appspec.yml, scripts 파일을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip \
            --source app-deploy

      # (8) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
          --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=deploy/$GITHUB_SHA.zip,bundleType=zip
